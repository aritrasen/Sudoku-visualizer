{"ast":null,"code":"import createNewGrid from '../utils/createNewGrid.js';\nimport createGrid from './action.js';\nimport removeElems from '../utils/removeElems.js';\nimport checkCol from '../utils/checkCol.js';\nimport checkRow from '../utils/checkRow.js';\nimport checkSquare from '../utils/checkSquare.js';\n\nfunction reducer(state = {}, action) {\n  switch (action.type) {\n    case \"CREATE_GRID\":\n      let fullGrid = createNewGrid();\n      let newGrid = removeElems(fullGrid);\n      return { ...state,\n        grid: newGrid.slice().map(function (row) {\n          return row.slice();\n        }),\n        solGrid: newGrid.slice().map(function (row) {\n          return row.slice();\n        })\n      };\n\n    case \"CHANGE_GRID\":\n      setInterval(() => {}, 10000);\n      let gridNew = [...state.grid];\n      let solGrid = [...state.solGrid];\n      let row = action.payload.row;\n      let col = action.payload.col;\n      let val = action.payload.val;\n      console.log(action.payload.row);\n\n      if (checkCol(gridNew, col, val) && checkRow(gridNew, row, val) && checkSquare(gridNew, row, col, val)) {\n        gridNew[row][col] = val;\n        console.log(\"Action\", solGrid[row][col]);\n        return { ...state,\n          grid: gridNew,\n          solGrid: solGrid\n        };\n      } else {\n        alert(\"Incorrect Option\");\n        return { ...state,\n          grid: gridNew,\n          solGrid: solGrid\n        };\n      }\n\n    default:\n      return state;\n  }\n}\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/aritrasen/Documents/react_projects/soduku/src/redux/reducer.js"],"names":["createNewGrid","createGrid","removeElems","checkCol","checkRow","checkSquare","reducer","state","action","type","fullGrid","newGrid","grid","slice","map","row","solGrid","setInterval","gridNew","payload","col","val","console","log","alert"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,2BAA1B;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;;AACA,SAASC,OAAT,CAAkBC,KAAK,GAAC,EAAxB,EAA4BC,MAA5B,EACA;AACI,UAAOA,MAAM,CAACC,IAAd;AAEI,SAAK,aAAL;AACA,UAAIC,QAAQ,GAAGV,aAAa,EAA5B;AACA,UAAIW,OAAO,GAAGT,WAAW,CAACQ,QAAD,CAAzB;AACA,aAAM,EAAE,GAAGH,KAAL;AAAYK,QAAAA,IAAI,EAAED,OAAO,CAACE,KAAR,GAAgBC,GAAhB,CAAqB,UAASC,GAAT,EAAa;AAAE,iBAAOA,GAAG,CAACF,KAAJ,EAAP;AAAqB,SAAzD,CAAlB;AAA6EG,QAAAA,OAAO,EAACL,OAAO,CAACE,KAAR,GAAgBC,GAAhB,CAAqB,UAASC,GAAT,EAAa;AAAE,iBAAOA,GAAG,CAACF,KAAJ,EAAP;AAAqB,SAAzD;AAArF,OAAN;;AACA,SAAK,aAAL;AAAoBI,MAAAA,WAAW,CAAC,MAAI,CAAE,CAAP,EAAQ,KAAR,CAAX;AACA,UAAIC,OAAO,GAAG,CAAC,GAAGX,KAAK,CAACK,IAAV,CAAd;AACA,UAAII,OAAO,GAAG,CAAC,GAAGT,KAAK,CAACS,OAAV,CAAd;AAEA,UAAID,GAAG,GAAGP,MAAM,CAACW,OAAP,CAAeJ,GAAzB;AACA,UAAIK,GAAG,GAAGZ,MAAM,CAACW,OAAP,CAAeC,GAAzB;AACA,UAAIC,GAAG,GAAGb,MAAM,CAACW,OAAP,CAAeE,GAAzB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYf,MAAM,CAACW,OAAP,CAAeJ,GAA3B;;AACA,UAAIZ,QAAQ,CAACe,OAAD,EAASE,GAAT,EAAaC,GAAb,CAAR,IAA2BjB,QAAQ,CAACc,OAAD,EAASH,GAAT,EAAaM,GAAb,CAAnC,IAAsDhB,WAAW,CAACa,OAAD,EAASH,GAAT,EAAaK,GAAb,EAAiBC,GAAjB,CAArE,EACA;AACOH,QAAAA,OAAO,CAACH,GAAD,CAAP,CAAaK,GAAb,IAAoBC,GAApB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAqBP,OAAO,CAACD,GAAD,CAAP,CAAaK,GAAb,CAArB;AACA,eAAO,EAAC,GAAGb,KAAJ;AAAWK,UAAAA,IAAI,EAAEM,OAAjB;AAA0BF,UAAAA,OAAO,EAAEA;AAAnC,SAAP;AACN,OALD,MAOA;AACIQ,QAAAA,KAAK,CAAC,kBAAD,CAAL;AACA,eAAO,EAAC,GAAGjB,KAAJ;AAAWK,UAAAA,IAAI,EAAEM,OAAjB;AAA0BF,UAAAA,OAAO,EAAEA;AAAnC,SAAP;AACH;;AACrB;AACI,aAAOT,KAAP;AA1BR;AA4BH;;AAED,eAAeD,OAAf","sourcesContent":["import createNewGrid from '../utils/createNewGrid.js'\r\nimport createGrid from './action.js'\r\nimport removeElems from '../utils/removeElems.js'\r\nimport checkCol from '../utils/checkCol.js'\r\nimport checkRow from '../utils/checkRow.js'\r\nimport checkSquare from '../utils/checkSquare.js'\r\nfunction reducer( state={}, action)\r\n{\r\n    switch(action.type)\r\n    {\r\n        case \"CREATE_GRID\" : \r\n        let fullGrid = createNewGrid()\r\n        let newGrid = removeElems(fullGrid)\r\n        return{ ...state, grid: newGrid.slice().map( function(row){ return row.slice(); }),solGrid:newGrid.slice().map( function(row){ return row.slice(); }) }\r\n        case \"CHANGE_GRID\": setInterval(()=>{},10000)\r\n                            let gridNew = [...state.grid]\r\n                            let solGrid = [...state.solGrid]\r\n\r\n                            let row = action.payload.row\r\n                            let col = action.payload.col\r\n                            let val = action.payload.val\r\n                            console.log(action.payload.row)\r\n                            if( checkCol(gridNew,col,val)&&checkRow(gridNew,row,val)&&checkSquare(gridNew,row,col,val))\r\n                            {\r\n                                   gridNew[row][col] = val\r\n                                   console.log(\"Action\",solGrid[row][col])\r\n                                   return {...state, grid: gridNew, solGrid: solGrid}   \r\n                            }\r\n                            else\r\n                            {\r\n                                alert(\"Incorrect Option\")\r\n                                return {...state, grid: gridNew, solGrid: solGrid} \r\n                            }        \r\n        default:\r\n            return state\r\n    }\r\n} \r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}