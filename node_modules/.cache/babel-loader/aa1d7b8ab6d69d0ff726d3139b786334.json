{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\aritrasen\\\\Documents\\\\react_projects\\\\sudoku\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";// hook from https://usehooks.com/useKeyPress/\nimport{useState,useEffect}from\"react\";// Hook\nfunction useKeyPress(targetKey){// State for keeping track of whether key is pressed\nvar _useState=useState(false),_useState2=_slicedToArray(_useState,2),keyPressed=_useState2[0],setKeyPressed=_useState2[1];// If pressed key is our target key then set to true\nfunction downHandler(_ref){var key=_ref.key;if(key===targetKey){setKeyPressed(true);}}// If released key is our target key then set to false\nvar upHandler=function upHandler(_ref2){var key=_ref2.key;if(key===targetKey){setKeyPressed(false);}};// Add event listeners\nuseEffect(function(){window.addEventListener(\"keydown\",downHandler);window.addEventListener(\"keyup\",upHandler);// Remove event listeners on cleanup\nreturn function(){window.removeEventListener(\"keydown\",downHandler);window.removeEventListener(\"keyup\",upHandler);};},[]);// Empty array ensures that effect is only run on mount and unmount\nreturn keyPressed;}export default useKeyPress;","map":{"version":3,"sources":["C:/Users/aritrasen/Documents/react_projects/sudoku/src/hooks/useKeypress.js"],"names":["useState","useEffect","useKeyPress","targetKey","keyPressed","setKeyPressed","downHandler","key","upHandler","window","addEventListener","removeEventListener"],"mappings":"6IAAA;AACA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CAEA;AACA,QAASC,CAAAA,WAAT,CAAqBC,SAArB,CAAgC,CAC9B;AAD8B,cAEMH,QAAQ,CAAC,KAAD,CAFd,wCAEvBI,UAFuB,eAEXC,aAFW,eAI9B;AACA,QAASC,CAAAA,WAAT,MAA8B,IAAPC,CAAAA,GAAO,MAAPA,GAAO,CAC5B,GAAIA,GAAG,GAAKJ,SAAZ,CAAuB,CACrBE,aAAa,CAAC,IAAD,CAAb,CACD,CACF,CAED;AACA,GAAMG,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,OAAa,IAAVD,CAAAA,GAAU,OAAVA,GAAU,CAC7B,GAAIA,GAAG,GAAKJ,SAAZ,CAAuB,CACrBE,aAAa,CAAC,KAAD,CAAb,CACD,CACF,CAJD,CAMA;AACAJ,SAAS,CAAC,UAAM,CACdQ,MAAM,CAACC,gBAAP,CAAwB,SAAxB,CAAmCJ,WAAnC,EACAG,MAAM,CAACC,gBAAP,CAAwB,OAAxB,CAAiCF,SAAjC,EACA;AACA,MAAO,WAAM,CACXC,MAAM,CAACE,mBAAP,CAA2B,SAA3B,CAAsCL,WAAtC,EACAG,MAAM,CAACE,mBAAP,CAA2B,OAA3B,CAAoCH,SAApC,EACD,CAHD,CAID,CARQ,CAQN,EARM,CAAT,CAQQ;AAER,MAAOJ,CAAAA,UAAP,CACD,CAED,cAAeF,CAAAA,WAAf","sourcesContent":["// hook from https://usehooks.com/useKeyPress/\r\nimport { useState, useEffect } from \"react\";\r\n\r\n// Hook\r\nfunction useKeyPress(targetKey) {\r\n  // State for keeping track of whether key is pressed\r\n  const [keyPressed, setKeyPressed] = useState(false);\r\n\r\n  // If pressed key is our target key then set to true\r\n  function downHandler({ key }) {\r\n    if (key === targetKey) {\r\n      setKeyPressed(true);\r\n    }\r\n  }\r\n\r\n  // If released key is our target key then set to false\r\n  const upHandler = ({ key }) => {\r\n    if (key === targetKey) {\r\n      setKeyPressed(false);\r\n    }\r\n  };\r\n\r\n  // Add event listeners\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", downHandler);\r\n    window.addEventListener(\"keyup\", upHandler);\r\n    // Remove event listeners on cleanup\r\n    return () => {\r\n      window.removeEventListener(\"keydown\", downHandler);\r\n      window.removeEventListener(\"keyup\", upHandler);\r\n    };\r\n  }, []); // Empty array ensures that effect is only run on mount and unmount\r\n\r\n  return keyPressed;\r\n}\r\n\r\nexport default useKeyPress;"]},"metadata":{},"sourceType":"module"}