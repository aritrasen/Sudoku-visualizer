{"ast":null,"code":"function backtrackNewGrid(grid, index) {\n  if (index === 81) return true;\n  const vals = Array(9).fill(0);\n  console.log(\"back tracking\");\n\n  for (let i = 0; i < 9; i++) {\n    vals[i] = i + 1;\n    console.log(vals[i]);\n  }\n\n  for (let i = 0; i < vals.length; i++) {\n    let row = Math.floor(index / 9);\n    let col = index % 9;\n    console.log(\"inside\" + row);\n    grid[row][col] = vals[i];\n    if (backtrackNewGrid(grid, index + 1)) return true;\n  }\n\n  return false;\n}\n\nfunction createNewGrid() {\n  const grid = [...Array(9)].map(() => [...Array(9).fill(0)]);\n  backtrackNewGrid(grid, 0);\n  return grid;\n}\n\nexport default createNewGrid;","map":{"version":3,"sources":["C:/Users/aritrasen/Documents/react_projects/soduku/src/utils/createNewGrid.js"],"names":["backtrackNewGrid","grid","index","vals","Array","fill","console","log","i","length","row","Math","floor","col","createNewGrid","map"],"mappings":"AAAA,SAASA,gBAAT,CAA0BC,IAA1B,EAAgCC,KAAhC,EACA;AAAK,MAAGA,KAAK,KAAG,EAAX,EACG,OAAO,IAAP;AAEH,QAAMC,IAAI,GAAGC,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,CAAd,CAAb;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAE,CAAnB,EAAsBA,CAAC,EAAvB,EAA2B;AACrBL,IAAAA,IAAI,CAACK,CAAD,CAAJ,GAASA,CAAC,GAAC,CAAX;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAI,CAACK,CAAD,CAAhB;AACF;;AAEJ,OAAI,IAAIA,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACL,IAAI,CAACM,MAApB,EAA4BD,CAAC,EAA7B,EACA;AAEK,QAAIE,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWV,KAAK,GAAC,CAAjB,CAAV;AACA,QAAIW,GAAG,GAAGX,KAAK,GAAC,CAAhB;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,WAASG,GAArB;AACAT,IAAAA,IAAI,CAACS,GAAD,CAAJ,CAAUG,GAAV,IAAiBV,IAAI,CAACK,CAAD,CAArB;AAEA,QAAGR,gBAAgB,CAACC,IAAD,EAAMC,KAAK,GAAC,CAAZ,CAAnB,EACK,OAAO,IAAP;AACT;;AAEF,SAAO,KAAP;AACH;;AAED,SAASY,aAAT,GACA;AACK,QAAMb,IAAI,GAAI,CAAC,GAAGG,KAAK,CAAC,CAAD,CAAT,EAAcW,GAAd,CAAmB,MAAK,CAAC,GAAGX,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,CAAd,CAAJ,CAAxB,CAAd;AACAL,EAAAA,gBAAgB,CAACC,IAAD,EAAM,CAAN,CAAhB;AACA,SAAOA,IAAP;AAEJ;;AAED,eAAea,aAAf","sourcesContent":["function backtrackNewGrid(grid, index)\r\n{    if(index===81)\r\n        return true;\r\n     \r\n     const vals = Array(9).fill(0)\r\n     console.log(\"back tracking\")\r\n     for (let i = 0; i <9; i++) {\r\n           vals[i]= i+1\r\n           console.log(vals[i])\r\n        }\r\n       \r\n     for(let i=0; i<vals.length; i++)\r\n     {\r\n         \r\n          let row = Math.floor(index/9)\r\n          let col = index%9\r\n          console.log(\"inside\"+row)\r\n          grid[row][col] = vals[i]\r\n          \r\n          if(backtrackNewGrid(grid,index+1))\r\n               return true\r\n     }\r\n\r\n    return false\r\n}\r\n\r\nfunction createNewGrid()\r\n{\r\n     const grid =  [...Array(9)].map( ()=> [...Array(9).fill(0)])\r\n     backtrackNewGrid(grid,0)\r\n     return grid\r\n\r\n}\r\n\r\nexport default createNewGrid;"]},"metadata":{},"sourceType":"module"}