{"ast":null,"code":"import shuffle from'./shuffle';import solveGridSol from'./solveGridSol';function removeElems(grid){var positions=Array(81).fill(0);for(var i=0;i<81;i++){positions[i]=i+1;}shuffle(positions);for(var _i=0;_i<81;_i++){var row=Math.floor(_i/9);var col=_i%9;var backup=grid[row][col];grid[row][col]=0;var counter={count:0};solveGridSol(grid,_i,counter);if(counter.count===2){grid[row][col]=backup;}}return grid;}export default removeElems;","map":{"version":3,"sources":["C:/Users/aritrasen/Documents/react_projects/sudoku/src/utils/removeElems.js"],"names":["shuffle","solveGridSol","removeElems","grid","positions","Array","fill","i","row","Math","floor","col","backup","counter","count"],"mappings":"AAAA,MAAOA,CAAAA,OAAP,KAAoB,WAApB,CACA,MAAOC,CAAAA,YAAP,KAAyB,gBAAzB,CACA,QAASC,CAAAA,WAAT,CAAqBC,IAArB,CACA,CACI,GAAMC,CAAAA,SAAS,CAAGC,KAAK,CAAC,EAAD,CAAL,CAAUC,IAAV,CAAe,CAAf,CAAlB,CACC,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAE,EAAnB,CAAuBA,CAAC,EAAxB,CAA4B,CACtBH,SAAS,CAACG,CAAD,CAAT,CAAcA,CAAC,CAAC,CAAhB,CACF,CACLP,OAAO,CAACI,SAAD,CAAP,CACA,IAAI,GAAIG,CAAAA,EAAC,CAAC,CAAV,CAAcA,EAAC,CAAC,EAAhB,CAAoBA,EAAC,EAArB,CACA,CACI,GAAMC,CAAAA,GAAG,CAAGC,IAAI,CAACC,KAAL,CAAWH,EAAC,CAAC,CAAb,CAAZ,CACA,GAAMI,CAAAA,GAAG,CAAGJ,EAAC,CAAC,CAAd,CACA,GAAIK,CAAAA,MAAM,CAAGT,IAAI,CAACK,GAAD,CAAJ,CAAUG,GAAV,CAAb,CACAR,IAAI,CAACK,GAAD,CAAJ,CAAUG,GAAV,EAAiB,CAAjB,CACA,GAAME,CAAAA,OAAO,CAAG,CAACC,KAAK,CAAC,CAAP,CAAhB,CACAb,YAAY,CAACE,IAAD,CAAMI,EAAN,CAAQM,OAAR,CAAZ,CACA,GAAGA,OAAO,CAACC,KAAR,GAAgB,CAAnB,CACA,CACOX,IAAI,CAACK,GAAD,CAAJ,CAAUG,GAAV,EAAiBC,MAAjB,CACN,CAGJ,CAED,MAAOT,CAAAA,IAAP,CACH,CAED,cAAeD,CAAAA,WAAf","sourcesContent":["import shuffle from './shuffle'\r\nimport solveGridSol from './solveGridSol'\r\nfunction removeElems(grid)\r\n{\r\n    const positions = Array(81).fill(0)\r\n     for (let i = 0; i <81; i++) {\r\n           positions[i]= i+1\r\n        }\r\n    shuffle(positions)\r\n    for(let i=0 ; i<81; i++)\r\n    {\r\n        const row = Math.floor(i/9)\r\n        const col = i%9\r\n        let backup = grid[row][col]\r\n        grid[row][col] = 0\r\n        const counter = {count:0}\r\n        solveGridSol(grid,i,counter)\r\n        if(counter.count===2)\r\n        {\r\n               grid[row][col] = backup\r\n        }\r\n\r\n\r\n    }\r\n    \r\n    return grid\r\n}\r\n\r\nexport default removeElems;"]},"metadata":{},"sourceType":"module"}