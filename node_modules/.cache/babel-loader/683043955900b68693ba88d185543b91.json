{"ast":null,"code":"import _toConsumableArray from\"C:\\\\Users\\\\aritrasen\\\\Documents\\\\react_projects\\\\sudoku\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"C:\\\\Users\\\\aritrasen\\\\Documents\\\\react_projects\\\\sudoku\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import createNewGrid from'../utils/createNewGrid.js';import createGrid from'./action.js';import removeElems from'../utils/removeElems.js';import checkCol from'../utils/checkCol.js';import checkRow from'../utils/checkRow.js';import checkSquare from'../utils/checkSquare.js';function reducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case\"CREATE_GRID\":var fullGrid=createNewGrid();var newGrid=removeElems(fullGrid);return _objectSpread({},state,{grid:newGrid.slice().map(function(row){return row.slice();}),solGrid:newGrid.slice().map(function(row){return row.slice();}),activeRow:9,activeCol:9});case\"CHANGE_GRID\":{var gridNew=_toConsumableArray(state.grid);var solGrid=_toConsumableArray(state.solGrid);var row=action.payload.row;var col=action.payload.col;var val=action.payload.val;console.log(action.payload.row);if(val===0){gridNew[row][col]=val;console.log(\"Action\",solGrid[row][col]);return _objectSpread({},state,{grid:gridNew,solGrid:solGrid});}else if(checkCol(gridNew,col,val)&&checkRow(gridNew,row,val)&&checkSquare(gridNew,row,col,val)){gridNew[row][col]=val;console.log(\"Action\",solGrid[row][col]);return _objectSpread({},state,{grid:gridNew,solGrid:solGrid,activeRow:9,activeCol:9});}else{alert(\"Incorrect Option\");return _objectSpread({},state,{grid:gridNew,solGrid:solGrid,activeRow:9,activeCol:9});}}case\"BACKTRACK\":{var _gridNew=state.grid.slice().map(function(row){return row.slice();});var _solGrid=state.solGrid.slice().map(function(row){return row.slice();});var _row=action.payload.row;var _col=action.payload.col;var _val=action.payload.val;console.log(action.payload.row);_gridNew[_row][_col]=_val;return _objectSpread({},state,{grid:_gridNew,solGrid:_solGrid,activeRow:_row,activeCol:_col});}default:return state;}}export default reducer;","map":{"version":3,"sources":["C:/Users/aritrasen/Documents/react_projects/sudoku/src/redux/reducer.js"],"names":["createNewGrid","createGrid","removeElems","checkCol","checkRow","checkSquare","reducer","state","action","type","fullGrid","newGrid","grid","slice","map","row","solGrid","activeRow","activeCol","gridNew","payload","col","val","console","log","alert"],"mappings":"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","sourcesContent":["import createNewGrid from '../utils/createNewGrid.js'\r\nimport createGrid from './action.js'\r\nimport removeElems from '../utils/removeElems.js'\r\nimport checkCol from '../utils/checkCol.js'\r\nimport checkRow from '../utils/checkRow.js'\r\nimport checkSquare from '../utils/checkSquare.js'\r\nfunction reducer( state={}, action)\r\n{\r\n    switch(action.type)\r\n    {\r\n        case \"CREATE_GRID\" : \r\n        let fullGrid = createNewGrid()\r\n        let newGrid = removeElems(fullGrid)\r\n        return{ ...state, grid: newGrid.slice().map( function(row){ return row.slice(); }),solGrid:newGrid.slice().map( function(row){ return row.slice(); }), activeRow:9,activeCol:9 }\r\n        case \"CHANGE_GRID\":{ \r\n                            let gridNew = [...state.grid]\r\n                            let solGrid = [...state.solGrid]\r\n\r\n                            let row = action.payload.row\r\n                            let col = action.payload.col\r\n                            let val = action.payload.val\r\n                            console.log(action.payload.row)\r\n                            if(val===0)\r\n                            {\r\n                                gridNew[row][col] = val\r\n                                console.log(\"Action\",solGrid[row][col])\r\n                                return {...state, grid: gridNew, solGrid: solGrid} \r\n                            }\r\n                            else if( checkCol(gridNew,col,val)&&checkRow(gridNew,row,val)&&checkSquare(gridNew,row,col,val))\r\n                            {\r\n                                   gridNew[row][col] = val\r\n                                   console.log(\"Action\",solGrid[row][col])\r\n                                   return {...state, grid: gridNew, solGrid: solGrid, activeRow: 9, activeCol: 9}   \r\n                            }\r\n                            else\r\n                            {\r\n                                alert(\"Incorrect Option\")\r\n                                return {...state, grid: gridNew, solGrid: solGrid,activeRow:9 , activeCol: 9} \r\n                            }\r\n                            \r\n                        }\r\n        case \"BACKTRACK\": { \r\n        let gridNew = state.grid.slice().map( function(row){ return row.slice(); })\r\n        let solGrid = state.solGrid.slice().map( function(row){ return row.slice(); })\r\n\r\n        let row = action.payload.row\r\n        let col = action.payload.col\r\n        let val = action.payload.val\r\n        console.log(action.payload.row)\r\n        gridNew[row][col] = val\r\n        return {...state, grid: gridNew, solGrid: solGrid,activeRow:row,activeCol:col} \r\n         }                      \r\n        default:\r\n            return state\r\n    }\r\n} \r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}