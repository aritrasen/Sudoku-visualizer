{"ast":null,"code":"function checkCol(grid, colIdx, val) {\n  const col = Array(9).fill(0);\n\n  for (let i = 0; i < 9; i++) col[i] = grid[i][colIdx];\n\n  return !col.includes(val);\n}\n\nfunction checkRow(grid, rowIdx, val) {\n  return !grid[rowIdx].includes(val);\n}\n\nfunction checkSquare(grid, rowIdx, colIdx, val) {\n  let startR = Math.floor(rowIdx / 3) * 3;\n  let startC = Math.floor(colIdx / 3) * 3;\n  if (rowIdx === 1 && colIdx === 0) console.log(\"check square\" + startR + \",\" + startC);\n\n  for (let i = 0; i <= 2; i++) for (let j = 0; j <= 2; j++) {\n    if (grid[startR + i][startC + j] === val) return false;\n  }\n\n  return true;\n}\n\nfunction solveGridSol(grid, index, counter) {\n  let pos = -1;\n\n  for (let i = index; i < 81; i++) {\n    const row = Math.floor(index / 9);\n    const col = index % 9;\n\n    if (grid[row][col] === 0) {\n      pos = i;\n      break;\n    }\n  }\n\n  if (pos === -1) {\n    counter.count++;\n  }\n\n  const row = Math.floor(pos / 9);\n  const col = pos % 9;\n\n  for (let i = 1; i <= 9; i++) {\n    if (checkCol(grid, col, i) && checkRow(grid, row, i) && checkSquare(grid, row, col, i)) {\n      grid[row][col] = i;\n      solveGrid(grid, index + 1);\n      if (counter.count === 2) break;\n      grid[row][col] = 0;\n    }\n  }\n}\n\nexport default solveGridSol;","map":{"version":3,"sources":["C:/Users/aritrasen/Documents/react_projects/soduku/src/utils/solveGridSol.js"],"names":["checkCol","grid","colIdx","val","col","Array","fill","i","includes","checkRow","rowIdx","checkSquare","startR","Math","floor","startC","console","log","j","solveGridSol","index","counter","pos","row","count","solveGrid"],"mappings":"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","sourcesContent":["function checkCol(grid,colIdx,val)\r\n{\r\n     const col = Array(9).fill(0)\r\n     for(let i=0; i<9;i++)\r\n       col[i] = grid[i][colIdx]\r\n     return !col.includes(val) \r\n}\r\n\r\nfunction checkRow(grid,rowIdx,val)\r\n{\r\n     return !grid[rowIdx].includes(val)\r\n}\r\n\r\nfunction checkSquare(grid,rowIdx,colIdx,val)\r\n{\r\n       let startR = Math.floor(rowIdx/3)*3\r\n       let startC= Math.floor(colIdx/3)*3\r\n       if(rowIdx===1&&colIdx===0)\r\n          console.log(\"check square\"+startR+\",\"+startC)\r\n       for(let i=0; i<=2; i++)\r\n       for(let j=0; j<=2; j++)\r\n       {\r\n            if(grid[startR+i][startC+j]===val)\r\n              return false\r\n       }\r\n\r\n       return true\r\n}\r\n\r\nfunction solveGridSol(grid, index, counter)\r\n{     let pos = -1\r\n      for(let i= index; i<81; i++)\r\n      {\r\n          \r\n          const row = Math.floor(index/9) \r\n          const col = index%9\r\n          if(grid[row][col]===0)\r\n           {\r\n               pos = i\r\n               break\r\n           }    \r\n           \r\n      }\r\n      if(pos===-1)\r\n      {\r\n         counter.count++\r\n      }\r\n      const row = Math.floor(pos/9) \r\n      const col = pos%9\r\n      \r\n\r\n    for(let i=1; i<=9; i++)\r\n    {\r\n          if(checkCol(grid,col,i)&&checkRow(grid,row,i)&&checkSquare(grid,row,col,i))\r\n          {\r\n              grid[row][col] = i;\r\n              solveGrid(grid,index+1)\r\n              if(counter.count===2)\r\n                 break\r\n              grid[row][col] = 0\r\n          }\r\n    }    \r\n\r\n}\r\n\r\nexport default solveGridSol;"]},"metadata":{},"sourceType":"module"}