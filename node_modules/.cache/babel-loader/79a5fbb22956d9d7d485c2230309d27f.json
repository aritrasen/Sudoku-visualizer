{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { changeGrid } from '../redux/action';\nimport checkRow from './checkRow';\nimport checkSquare from './checkSquare';\nimport checkCol from './checkCol';\n\nfunction useBackTrack(index) {\n  let pos = -1;\n  const grid = useSelector(state => state.grid);\n  const dispatch = useDispatch();\n\n  for (let i = index; i < 81; i++) {\n    const row = Math.floor(index / 9);\n    const col = index % 9;\n\n    if (grid[row][col] === 0) {\n      pos = i;\n      break;\n    }\n  }\n\n  if (pos === -1) {\n    return true;\n  }\n\n  const row = Math.floor(pos / 9);\n  const col = pos % 9;\n\n  for (let i = 1; i <= 9; i++) {\n    if (checkCol(grid, col, i) && checkRow(grid, row, i) && checkSquare(grid, row, col, i)) {\n      dispatch(changeGrid({\n        row: row,\n        col: col,\n        val: i\n      }));\n\n      if (useBackTrack(index + 1)) {\n        return true;\n      } else {\n        dispatch(changeGrid({\n          row: row,\n          col: col,\n          val: 0\n        }));\n      }\n    }\n  }\n\n  return false;\n}\n\nexport default useBackTrack;","map":{"version":3,"sources":["C:/Users/aritrasen/Documents/react_projects/soduku/src/utils/backTrack.js"],"names":["React","useState","useEffect","useSelector","useDispatch","changeGrid","checkRow","checkSquare","checkCol","useBackTrack","index","pos","grid","state","dispatch","i","row","Math","floor","col","val"],"mappings":"AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,QAAuC,OAAvC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAAQC,UAAR,QAAyB,iBAAzB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,SAASC,YAAT,CAAsBC,KAAtB,EACA;AACI,MAAIC,GAAG,GAAG,CAAC,CAAX;AACA,QAAMC,IAAI,GAAGT,WAAW,CAACU,KAAK,IAAGA,KAAK,CAACD,IAAf,CAAxB;AACA,QAAME,QAAQ,GAAGV,WAAW,EAA5B;;AACA,OAAI,IAAIW,CAAC,GAAEL,KAAX,EAAkBK,CAAC,GAAC,EAApB,EAAwBA,CAAC,EAAzB,EACA;AAEI,UAAMC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWR,KAAK,GAAC,CAAjB,CAAZ;AACA,UAAMS,GAAG,GAAGT,KAAK,GAAC,CAAlB;;AAEA,QAAGE,IAAI,CAACI,GAAD,CAAJ,CAAUG,GAAV,MAAiB,CAApB,EACC;AACIR,MAAAA,GAAG,GAAGI,CAAN;AACA;AACH;AAEL;;AACD,MAAGJ,GAAG,KAAG,CAAC,CAAV,EACA;AACG,WAAO,IAAP;AACF;;AACD,QAAMK,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWP,GAAG,GAAC,CAAf,CAAZ;AACA,QAAMQ,GAAG,GAAGR,GAAG,GAAC,CAAhB;;AAGF,OAAI,IAAII,CAAC,GAAC,CAAV,EAAaA,CAAC,IAAE,CAAhB,EAAmBA,CAAC,EAApB,EACA;AACM,QAAGP,QAAQ,CAACI,IAAD,EAAMO,GAAN,EAAUJ,CAAV,CAAR,IAAsBT,QAAQ,CAACM,IAAD,EAAMI,GAAN,EAAUD,CAAV,CAA9B,IAA4CR,WAAW,CAACK,IAAD,EAAMI,GAAN,EAAUG,GAAV,EAAcJ,CAAd,CAA1D,EACA;AACID,MAAAA,QAAQ,CAACT,UAAU,CAAC;AAACW,QAAAA,GAAG,EAACA,GAAL;AAASG,QAAAA,GAAG,EAACA,GAAb;AAAkBC,QAAAA,GAAG,EAACL;AAAtB,OAAD,CAAX,CAAR;;AACA,UAAGN,YAAY,CAACC,KAAK,GAAC,CAAP,CAAf,EACA;AACI,eAAO,IAAP;AACH,OAHD,MAKA;AACAI,QAAAA,QAAQ,CAACT,UAAU,CAAC;AAACW,UAAAA,GAAG,EAACA,GAAL;AAASG,UAAAA,GAAG,EAACA,GAAb;AAAkBC,UAAAA,GAAG,EAAC;AAAtB,SAAD,CAAX,CAAR;AACC;AACJ;AACN;;AACD,SAAO,KAAP;AACD;;AAED,eAAeX,YAAf","sourcesContent":["import React,{useState,useEffect} from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { useDispatch } from 'react-redux'\r\nimport {changeGrid} from '../redux/action'\r\nimport checkRow from './checkRow'\r\nimport checkSquare from './checkSquare'\r\nimport checkCol from './checkCol'\r\n\r\nfunction useBackTrack(index)\r\n{\r\n    let pos = -1\r\n    const grid = useSelector(state=> state.grid)\r\n    const dispatch = useDispatch()\r\n    for(let i= index; i<81; i++)\r\n    {\r\n        \r\n        const row = Math.floor(index/9) \r\n        const col = index%9\r\n\r\n        if(grid[row][col]===0)\r\n         {\r\n             pos = i\r\n             break\r\n         }    \r\n         \r\n    }\r\n    if(pos===-1)\r\n    {\r\n       return true\r\n    }\r\n    const row = Math.floor(pos/9) \r\n    const col = pos%9\r\n    \r\n\r\n  for(let i=1; i<=9; i++)\r\n  {\r\n        if(checkCol(grid,col,i)&&checkRow(grid,row,i)&&checkSquare(grid,row,col,i))\r\n        {\r\n            dispatch(changeGrid({row:row,col:col, val:i}))\r\n            if(useBackTrack(index+1))\r\n            {\r\n                return true\r\n            }\r\n            else\r\n            {\r\n            dispatch(changeGrid({row:row,col:col, val:0}))\r\n            }\r\n        }\r\n  }\r\n  return false    \r\n}\r\n\r\nexport default useBackTrack;"]},"metadata":{},"sourceType":"module"}