{"ast":null,"code":"import _toConsumableArray from\"C:\\\\Users\\\\aritrasen\\\\Documents\\\\react_projects\\\\sudoku\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";import shuffle from'./shuffle';import checkRow from'./checkRow';import checkSquare from'./checkSquare';import checkCol from'./checkCol';function backtrackNewGrid(grid,index){if(index===81)return true;//console.log(index)\nvar onenine=Array(9).fill(0);//console.log(\"back tracking\")\nfor(var i=0;i<9;i++){onenine[i]=i+1;//console.log(vals[i])\n}var vals=shuffle(onenine);var row=Math.floor(index/9);var col=index%9;for(var _i=0;_i<vals.length;_i++){if(checkCol(grid,col,vals[_i])&&checkRow(grid,row,vals[_i])&&checkSquare(grid,row,col,vals[_i])){//if(row===1&&col===0)\n//console.log(\"check\"+grid[0][0]+grid[0][1]+grid[0][2]+grid[0][3]+vals[i])\ngrid[row][col]=vals[_i];if(backtrackNewGrid(grid,index+1))return true;grid[row][col]=0;}}return false;}function createNewGrid(){var grid=_toConsumableArray(Array(9)).map(function(){return _toConsumableArray(Array(9).fill(0));});backtrackNewGrid(grid,0);return grid;}export default createNewGrid;","map":{"version":3,"sources":["C:/Users/aritrasen/Documents/react_projects/sudoku/src/utils/createNewGrid.js"],"names":["shuffle","checkRow","checkSquare","checkCol","backtrackNewGrid","grid","index","onenine","Array","fill","i","vals","row","Math","floor","col","length","createNewGrid","map"],"mappings":"qJAAA,MAAOA,CAAAA,OAAP,KAAoB,WAApB,CACA,MAAOC,CAAAA,QAAP,KAAqB,YAArB,CACA,MAAOC,CAAAA,WAAP,KAAwB,eAAxB,CACA,MAAOC,CAAAA,QAAP,KAAqB,YAArB,CAEA,QAASC,CAAAA,gBAAT,CAA0BC,IAA1B,CAAgCC,KAAhC,CACA,CAAK,GAAGA,KAAK,GAAG,EAAX,CACG,MAAO,KAAP,CACH;AACA,GAAMC,CAAAA,OAAO,CAAGC,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,CAAd,CAAhB,CACA;AACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAE,CAAnB,CAAsBA,CAAC,EAAvB,CAA2B,CACrBH,OAAO,CAACG,CAAD,CAAP,CAAYA,CAAC,CAAC,CAAd,CACA;AACF,CACJ,GAAMC,CAAAA,IAAI,CAAGX,OAAO,CAACO,OAAD,CAApB,CACA,GAAMK,CAAAA,GAAG,CAAGC,IAAI,CAACC,KAAL,CAAWR,KAAK,CAAC,CAAjB,CAAZ,CACA,GAAMS,CAAAA,GAAG,CAAGT,KAAK,CAAC,CAAlB,CAIA,IAAI,GAAII,CAAAA,EAAC,CAAC,CAAV,CAAaA,EAAC,CAACC,IAAI,CAACK,MAApB,CAA4BN,EAAC,EAA7B,CACA,CAIK,GAAGP,QAAQ,CAACE,IAAD,CAAMU,GAAN,CAAUJ,IAAI,CAACD,EAAD,CAAd,CAAR,EAA4BT,QAAQ,CAACI,IAAD,CAAMO,GAAN,CAAUD,IAAI,CAACD,EAAD,CAAd,CAApC,EAAwDR,WAAW,CAACG,IAAD,CAAMO,GAAN,CAAUG,GAAV,CAAcJ,IAAI,CAACD,EAAD,CAAlB,CAAtE,CACA,CACC;AACE;AAEHL,IAAI,CAACO,GAAD,CAAJ,CAAUG,GAAV,EAAiBJ,IAAI,CAACD,EAAD,CAArB,CACA,GAAGN,gBAAgB,CAACC,IAAD,CAAMC,KAAK,CAAC,CAAZ,CAAnB,CACK,MAAO,KAAP,CACLD,IAAI,CAACO,GAAD,CAAJ,CAAUG,GAAV,EAAgB,CAAhB,CACC,CACL,CAEF,MAAO,MAAP,CACH,CAED,QAASE,CAAAA,aAAT,EACA,CACK,GAAMZ,CAAAA,IAAI,CAAI,mBAAIG,KAAK,CAAC,CAAD,CAAT,EAAcU,GAAd,CAAmB,qCAASV,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,CAAd,CAAT,GAAnB,CAAd,CACAL,gBAAgB,CAACC,IAAD,CAAM,CAAN,CAAhB,CACA,MAAOA,CAAAA,IAAP,CAEJ,CAED,cAAeY,CAAAA,aAAf","sourcesContent":["import shuffle from './shuffle'\r\nimport checkRow from './checkRow'\r\nimport checkSquare from './checkSquare'\r\nimport checkCol from './checkCol'\r\n\r\nfunction backtrackNewGrid(grid, index)\r\n{    if(index===81)\r\n        return true; \r\n     //console.log(index)\r\n     const onenine = Array(9).fill(0)\r\n     //console.log(\"back tracking\")\r\n     for (let i = 0; i <9; i++) {\r\n           onenine[i]= i+1\r\n           //console.log(vals[i])\r\n        }\r\n     const vals = shuffle(onenine)   \r\n     const row = Math.floor(index/9)\r\n     const col = index%9 \r\n     \r\n    \r\n               \r\n     for(let i=0; i<vals.length; i++)\r\n     {\r\n         \r\n         \r\n\r\n          if(checkCol(grid,col,vals[i])&&checkRow(grid,row,vals[i])&&checkSquare(grid,row,col,vals[i]))\r\n          {\r\n           //if(row===1&&col===0)\r\n             //console.log(\"check\"+grid[0][0]+grid[0][1]+grid[0][2]+grid[0][3]+vals[i])\r\n\r\n          grid[row][col] = vals[i]\r\n          if(backtrackNewGrid(grid,index+1))\r\n               return true\r\n          grid[row][col] =0     \r\n          }     \r\n     }\r\n      \r\n    return false\r\n}\r\n\r\nfunction createNewGrid()\r\n{\r\n     const grid =  [...Array(9)].map( ()=> [...Array(9).fill(0)])\r\n     backtrackNewGrid(grid,0)\r\n     return grid\r\n\r\n}\r\n\r\nexport default createNewGrid;"]},"metadata":{},"sourceType":"module"}