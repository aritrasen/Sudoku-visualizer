{"ast":null,"code":"import shuffle from './shuffle';\n\nfunction checkCol(grid, colIdx, val) {\n  const col = Array(9).fill(0);\n\n  for (let i = 0; i < 9; i++) col[i] = grid[i][colIdx];\n\n  return !col.includes(val);\n}\n\nfunction checkRow(grid, rowIdx, val) {\n  return !grid[rowIdx].includes(val);\n}\n\nfunction checkSquare(grid, rowIdx, colIdx, val) {\n  let startR = Math.floor(rowIdx / 3) * 3;\n  let startC = Math.floor(colIdx / 3) * 3;\n  if (rowIdx === 1 && colIdx === 0) console.log(\"check square\" + startR + \",\" + startC);\n\n  for (let i = 0; i <= 2; i++) for (let j = 0; j <= 2; j++) {\n    if (grid[startR + i][startC + j] === val) return false;\n  }\n\n  return true;\n}\n\nfunction backtrackNewGrid(grid, index) {\n  if (index === 81) return true; //console.log(index)\n\n  const onenine = Array(9).fill(0); //console.log(\"back tracking\")\n\n  for (let i = 0; i < 9; i++) {\n    onenine[i] = i + 1; //console.log(vals[i])\n  }\n\n  const vals = shuffle(onenine);\n  const row = Math.floor(index / 9);\n  const col = index % 9;\n\n  for (let i = 0; i < vals.length; i++) {\n    if (checkCol(grid, col, vals[i]) && checkRow(grid, row, vals[i]) && checkSquare(grid, row, col, vals[i])) {\n      //if(row===1&&col===0)\n      //console.log(\"check\"+grid[0][0]+grid[0][1]+grid[0][2]+grid[0][3]+vals[i])\n      grid[row][col] = vals[i];\n      if (backtrackNewGrid(grid, index + 1)) return true;\n      grid[row][col] = 0;\n    }\n  }\n\n  return false;\n}\n\nfunction createNewGrid() {\n  const grid = [...Array(9)].map(() => [...Array(9).fill(0)]);\n  backtrackNewGrid(grid, 0);\n  return grid;\n}\n\nexport default createNewGrid;","map":{"version":3,"sources":["C:/Users/aritrasen/Documents/react_projects/soduku/src/utils/createNewGrid.js"],"names":["shuffle","checkCol","grid","colIdx","val","col","Array","fill","i","includes","checkRow","rowIdx","checkSquare","startR","Math","floor","startC","console","log","j","backtrackNewGrid","index","onenine","vals","row","length","createNewGrid","map"],"mappings":"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","sourcesContent":["import shuffle from './shuffle'\r\nfunction checkCol(grid,colIdx,val)\r\n{\r\n     const col = Array(9).fill(0)\r\n     for(let i=0; i<9;i++)\r\n       col[i] = grid[i][colIdx]\r\n     return !col.includes(val) \r\n}\r\n\r\nfunction checkRow(grid,rowIdx,val)\r\n{\r\n     return !grid[rowIdx].includes(val)\r\n}\r\n\r\nfunction checkSquare(grid,rowIdx,colIdx,val)\r\n{\r\n       let startR = Math.floor(rowIdx/3)*3\r\n       let startC= Math.floor(colIdx/3)*3\r\n       if(rowIdx===1&&colIdx===0)\r\n          console.log(\"check square\"+startR+\",\"+startC)\r\n       for(let i=0; i<=2; i++)\r\n       for(let j=0; j<=2; j++)\r\n       {\r\n            if(grid[startR+i][startC+j]===val)\r\n              return false\r\n       }\r\n\r\n       return true\r\n}\r\n\r\nfunction backtrackNewGrid(grid, index)\r\n{    if(index===81)\r\n        return true; \r\n     //console.log(index)\r\n     const onenine = Array(9).fill(0)\r\n     //console.log(\"back tracking\")\r\n     for (let i = 0; i <9; i++) {\r\n           onenine[i]= i+1\r\n           //console.log(vals[i])\r\n        }\r\n     const vals = shuffle(onenine)   \r\n     const row = Math.floor(index/9)\r\n     const col = index%9 \r\n     \r\n    \r\n               \r\n     for(let i=0; i<vals.length; i++)\r\n     {\r\n         \r\n         \r\n\r\n          if(checkCol(grid,col,vals[i])&&checkRow(grid,row,vals[i])&&checkSquare(grid,row,col,vals[i]))\r\n          {\r\n           //if(row===1&&col===0)\r\n             //console.log(\"check\"+grid[0][0]+grid[0][1]+grid[0][2]+grid[0][3]+vals[i])\r\n\r\n          grid[row][col] = vals[i]\r\n          if(backtrackNewGrid(grid,index+1))\r\n               return true\r\n          grid[row][col] =0     \r\n          }     \r\n     }\r\n      \r\n    return false\r\n}\r\n\r\nfunction createNewGrid()\r\n{\r\n     const grid =  [...Array(9)].map( ()=> [...Array(9).fill(0)])\r\n     backtrackNewGrid(grid,0)\r\n     return grid\r\n\r\n}\r\n\r\nexport default createNewGrid;"]},"metadata":{},"sourceType":"module"}