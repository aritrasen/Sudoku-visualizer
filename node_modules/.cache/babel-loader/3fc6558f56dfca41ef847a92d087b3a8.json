{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aritrasen\\\\Documents\\\\react_projects\\\\soduku\\\\src\\\\components\\\\Block.js\";\nimport React, { useState, useEffect } from 'react';\nimport BlockContainer from '../styles/BlockContainer';\nimport Input from '../styles/InputContainer';\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nimport { changeGrid } from '../redux/action';\nimport useKeypress from '../hooks/useKeypress';\n\nconst Block = ({\n  colIndex,\n  rowIndex\n}) => {\n  const [isInputActive, setIsInputActive] = useState(false);\n  const [inputValue, setInputValue] = useState(\"\");\n  const val = useSelector(state => state.grid ? state.grid[colIndex][rowIndex] : 0);\n  const dispatch = useDispatch();\n  const enter = useKeypress('Enter');\n  const esc = useKeypress('Escape');\n  useEffect(() => {\n    if (isInputActive) {\n      // if Enter is pressed, save the text and case the editor\n      if (enter) {\n        dispatch(changeGrid({\n          row: rowIndex,\n          col: colIndex,\n          val: inputValue\n        }));\n        setIsInputActive(false);\n      } // if Escape is pressed, revert the text and close the editor\n\n\n      if (esc) {\n        setIsInputActive(false);\n      }\n    }\n  }, [enter, esc]);\n  return isInputActive ? /*#__PURE__*/React.createElement(Input, {\n    type: \"text\",\n    value: inputValue,\n    onChange: e => setInputValue(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 24\n    }\n  }) : /*#__PURE__*/React.createElement(BlockContainer, {\n    onClick: () => setIsInputActive(!isInputActive),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 53\n    }\n  }, val);\n};\n\nexport default Block;","map":{"version":3,"sources":["C:/Users/aritrasen/Documents/react_projects/soduku/src/components/Block.js"],"names":["React","useState","useEffect","BlockContainer","Input","useSelector","useDispatch","changeGrid","useKeypress","Block","colIndex","rowIndex","isInputActive","setIsInputActive","inputValue","setInputValue","val","state","grid","dispatch","enter","esc","row","col","e","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,QAAuC,OAAvC;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAAQC,UAAR,QAAyB,iBAAzB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAA4B;AACxC,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCZ,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACa,UAAD,EAAaC,aAAb,IAA8Bd,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAMe,GAAG,GAAGX,WAAW,CAACY,KAAK,IAAGA,KAAK,CAACC,IAAN,GAAYD,KAAK,CAACC,IAAN,CAAWR,QAAX,EAAqBC,QAArB,CAAZ,GAA2C,CAApD,CAAvB;AACA,QAAMQ,QAAQ,GAAGb,WAAW,EAA5B;AACA,QAAMc,KAAK,GAAGZ,WAAW,CAAC,OAAD,CAAzB;AACA,QAAMa,GAAG,GAAGb,WAAW,CAAC,QAAD,CAAvB;AACAN,EAAAA,SAAS,CAAC,MAAM;AAEd,QAAIU,aAAJ,EAAmB;AAEjB;AAEA,UAAIQ,KAAJ,EAAW;AAGTD,QAAAA,QAAQ,CAACZ,UAAU,CAAC;AAACe,UAAAA,GAAG,EAACX,QAAL;AAAcY,UAAAA,GAAG,EAACb,QAAlB;AAA4BM,UAAAA,GAAG,EAACF;AAAhC,SAAD,CAAX,CAAR;AACAD,QAAAA,gBAAgB,CAAC,KAAD,CAAhB;AAED,OAVgB,CAYjB;;;AAEA,UAAIQ,GAAJ,EAAS;AAIPR,QAAAA,gBAAgB,CAAC,KAAD,CAAhB;AAED;AAEF;AAEF,GA1BQ,EA0BN,CAACO,KAAD,EAAQC,GAAR,CA1BM,CAAT;AA2BA,SAAOT,aAAa,gBAAC,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,KAAK,EAAEE,UAA1B;AAErB,IAAA,QAAQ,EAAGU,CAAD,IAAOT,aAAa,CAACS,CAAC,CAACC,MAAF,CAASC,KAAV,CAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAD,gBAE8B,oBAAC,cAAD;AAAgB,IAAA,OAAO,EAAG,MAAIb,gBAAgB,CAAC,CAACD,aAAF,CAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiEI,GAAjE,CAFlD;AAGD,CArCD;;AAuCA,eAAeP,KAAf","sourcesContent":["import React,{useState,useEffect} from 'react'\r\nimport BlockContainer from '../styles/BlockContainer'\r\nimport Input from '../styles/InputContainer'\r\nimport { useSelector } from 'react-redux'\r\nimport { useDispatch } from 'react-redux'\r\nimport {changeGrid} from '../redux/action'\r\nimport useKeypress from '../hooks/useKeypress'\r\n\r\nconst Block = ({ colIndex, rowIndex }) => {\r\n  const [isInputActive, setIsInputActive] = useState(false)\r\n  const [inputValue, setInputValue] = useState(\"\")\r\n  const val = useSelector(state=> state.grid? state.grid[colIndex][rowIndex]:0)\r\n  const dispatch = useDispatch()\r\n  const enter = useKeypress('Enter');\r\n  const esc = useKeypress('Escape');\r\n  useEffect(() => {\r\n\r\n    if (isInputActive) {\r\n\r\n      // if Enter is pressed, save the text and case the editor\r\n\r\n      if (enter) {\r\n\r\n        \r\n        dispatch(changeGrid({row:rowIndex,col:colIndex, val:inputValue}))\r\n        setIsInputActive(false);\r\n\r\n      }\r\n\r\n      // if Escape is pressed, revert the text and close the editor\r\n\r\n      if (esc) {\r\n\r\n        \r\n\r\n        setIsInputActive(false);\r\n\r\n      }\r\n\r\n    }\r\n\r\n  }, [enter, esc]);\r\n  return isInputActive?<Input type='text' value={inputValue}\r\n\r\n  onChange={(e) => setInputValue(e.target.value)}/>:<BlockContainer onClick= {()=>setIsInputActive(!isInputActive)}>{val}</BlockContainer>\r\n}\r\n\r\nexport default Block"]},"metadata":{},"sourceType":"module"}