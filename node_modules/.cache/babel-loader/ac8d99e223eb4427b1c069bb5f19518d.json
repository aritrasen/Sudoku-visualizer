{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\aritrasen\\\\Documents\\\\react_projects\\\\sudoku\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import BlockContainer from'../styles/BlockContainer';import Input from'../styles/InputContainer';import{useSelector}from'react-redux';import{useDispatch}from'react-redux';import{changeGrid}from'../redux/action';import useKeypress from'../hooks/useKeypress';var Block=function Block(_ref){var rowIndex=_ref.rowIndex,colIndex=_ref.colIndex;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isInputActive=_useState2[0],setIsInputActive=_useState2[1];var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),inputValue=_useState4[0],setInputValue=_useState4[1];var val=useSelector(function(state){return state.grid?state.grid[rowIndex][colIndex]:0;});var solVal=useSelector(function(state){return state.solGrid?state.solGrid[rowIndex][colIndex]:1;});var activeRow=useSelector(function(state){return state.activeRow;});var activeCol=useSelector(function(state){return state.activeCol;});var isEditable=solVal===0;var selected=activeRow===rowIndex&&activeCol===colIndex;console.log(\"row\",rowIndex,\"col\",colIndex,\"edit\",isEditable);console.log(\"activeRow\",activeRow,\"activeCol\",activeCol,\"selected\",selected);var dispatch=useDispatch();var enter=useKeypress('Enter');var esc=useKeypress('Escape');useEffect(function(){if(isInputActive){// if Enter is pressed, save the text and case the editor\nif(enter){dispatch(changeGrid({row:rowIndex,col:colIndex,val:inputValue}));setIsInputActive(false);}// if Escape is pressed, revert the text and close the editor\nif(esc){setIsInputActive(false);}}},[enter,esc]);return isInputActive?/*#__PURE__*/React.createElement(Input,{type:\"number\",value:inputValue,onChange:function onChange(e){return setInputValue(parseInt(e.target.value));}}):/*#__PURE__*/React.createElement(BlockContainer,{chosen:selected,onClick:function onClick(){return isEditable?setIsInputActive(!isInputActive):null;}},val===0?\"\":val);};export default Block;","map":{"version":3,"sources":["C:/Users/aritrasen/Documents/react_projects/sudoku/src/components/Block.js"],"names":["React","useState","useEffect","BlockContainer","Input","useSelector","useDispatch","changeGrid","useKeypress","Block","rowIndex","colIndex","isInputActive","setIsInputActive","inputValue","setInputValue","val","state","grid","solVal","solGrid","activeRow","activeCol","isEditable","selected","console","log","dispatch","enter","esc","row","col","e","parseInt","target","value"],"mappings":"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","sourcesContent":["import React,{useState,useEffect} from 'react'\r\nimport BlockContainer from '../styles/BlockContainer'\r\nimport Input from '../styles/InputContainer'\r\nimport { useSelector } from 'react-redux'\r\nimport { useDispatch } from 'react-redux'\r\nimport {changeGrid} from '../redux/action'\r\nimport useKeypress from '../hooks/useKeypress'\r\n\r\nconst Block = ({ rowIndex, colIndex }) => {\r\n  const [isInputActive, setIsInputActive] = useState(false)\r\n  const [inputValue, setInputValue] = useState(\"\")\r\n  const val = useSelector(state=> state.grid? state.grid[rowIndex][colIndex]:0)\r\n  const solVal = useSelector(state=> state.solGrid? state.solGrid[rowIndex][colIndex]:1)\r\n  const activeRow = useSelector(state => state.activeRow)\r\n  const activeCol = useSelector(state => state.activeCol)\r\n  const isEditable = solVal===0\r\n  const selected = activeRow===rowIndex&&activeCol===colIndex\r\n  console.log(\"row\",rowIndex,\"col\",colIndex,\"edit\",isEditable)\r\n  console.log(\"activeRow\", activeRow, \"activeCol\",activeCol,\"selected\",selected)\r\n  const dispatch = useDispatch()\r\n  const enter = useKeypress('Enter');\r\n  const esc = useKeypress('Escape');\r\n  useEffect(() => {\r\n\r\n    if (isInputActive) {\r\n\r\n      // if Enter is pressed, save the text and case the editor\r\n\r\n      if (enter) {\r\n\r\n        \r\n        dispatch(changeGrid({row:rowIndex,col:colIndex, val:inputValue}))\r\n        setIsInputActive(false);\r\n\r\n      }\r\n\r\n      // if Escape is pressed, revert the text and close the editor\r\n\r\n      if (esc) {\r\n\r\n        \r\n\r\n        setIsInputActive(false);\r\n\r\n      }\r\n\r\n    }\r\n\r\n  }, [enter, esc]);\r\n  return isInputActive?<Input type='number' value={inputValue}\r\n\r\n  onChange={(e) => setInputValue(parseInt(e.target.value))}/>:<BlockContainer chosen = {selected} onClick= {()=>isEditable?setIsInputActive(!isInputActive): null}>{val===0 ? \"\":val}</BlockContainer>\r\n}\r\n\r\nexport default Block"]},"metadata":{},"sourceType":"module"}